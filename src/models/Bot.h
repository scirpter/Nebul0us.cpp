#pragma once

#include "../common.h"
#include "World.h"

#include <cstdint>
#include <string>

namespace specific
{
    struct Control
    {
        uint8_t m_speed;
        uint8_t m_cached_speed;
        uint8_t m_angle;
        uint8_t m_cached_angle;
        uint8_t m_eject_ct;
        uint8_t m_split_ct;
        uint8_t m_drop_ct;
    };

    struct BlobData
    {
        std::string name;
        std::string ticket;
        not_implemented_t m_skin = nullptr;
        not_implemented_t m_rainbow_cycle = nullptr;
        not_implemented_t m_name_font = nullptr;
        not_implemented_t m_halo = nullptr;
        not_implemented_t m_hat = nullptr;
        not_implemented_t m_particle = nullptr;
        not_implemented_t m_visibility = nullptr;
        not_implemented_t m_eject_skin = nullptr;
    };

    struct net
    {
        not_implemented_t m_connection_state = nullptr;
        std::string m_ip;
        uint16_t m_port;
        not_implemented_t m_sock = nullptr;
        models::World *p_world;

        /*
            Two tokens received from CONNECT_RESULT_2 (0x01).
            Used to identify the client server-side.
        */

        uint32_t cr2_token1;
        uint32_t cr2_token2;

        /*
            Same as above, but randomly generated by ourselves.
            These also need to be provided sometimes when
            sending packets, e.g. DISCONNECT (0x07).
        */

        uint32_t rng_token1;
        uint32_t rng_token2;
    };
}

namespace models
{
    class Bot
    {
    public:
        const uint8_t m_uniquifier;
        specific::Control *p_control;
        specific::BlobData *p_blob_data;
        specific::net *p_net;
    };
}
